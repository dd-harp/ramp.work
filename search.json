[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ramp.work authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Analysis.html","id":"eir-to-infective-biting-rates","dir":"Articles","previous_headings":"","what":"EIR to infective biting rates","title":"Analysis","text":"daily EIR related human blood feeding infective mosquitoes patches formula: E=β⋅fqZE = \\beta \\cdot fqZ EE vector length NhN_h, fqZfqZ vector length NpN_p, β\\beta Np×NhN_p \\times N_h matrix. note fqZ=(βT⋅β)−1⋅βT⋅EfqZ = \\left(\\beta^T \\cdot \\beta \\right)^{-1} \\cdot \\beta^T \\cdot E","code":""},{"path":"/articles/Analysis.html","id":"eir-and-exposure","dir":"Articles","previous_headings":"","what":"EIR and Exposure","title":"Analysis","text":"daily FoI function daily EIR h=Fh(E,b,…)h = F_h(E, b, \\ldots) α=Fα(E,b,t,…)\\alpha = F_\\alpha(E, b, t, \\ldots) Poisson case, h=bEh = E=h/b,E = h/b, α=1−e−\\alpha = 1 - e^{-} E=−ln(1−α)= \\frac{-\\ln(1-\\alpha)}{b}","code":""},{"path":"/articles/Fitting_pr2eir.html","id":"section","dir":"Articles","previous_headings":"","what":"Time Series PR to EIR","title":"Time Series PR to EIR","text":"dynamical systems model, ℳ\\mathcal M, describing malaria… Step-Ahead Fitting Suppose time series observations: x1,x2,x3,…,xnx_1, x_2, x_3, \\ldots, x_n time points t1,t2,t3,…,tnt_1, t_2, t_3, \\ldots, t_n looking set ar values: α1,α2,α3,…,αn\\alpha_1, \\alpha_2, \\alpha_3, \\ldots, \\alpha_n Let Fℳ(t,αt,yt,ℳ)=yt+1F_{\\mathcal M}(t, \\alpha_t, y_t, {\\mathcal M}) = y_{t+1} function solves (updates) model, ℳ\\mathcal M time tt returns state variables yy pseudo-code fitting algorithm : initialize model, ℳ\\mathcal M, Fℳ(t1,α1,y1,ℳ)=y1F_{\\mathcal M}(t_1, \\alpha_1, y_1, {\\mathcal M}) = y_1 Fobs(y1)=x1F_{obs}(y_1) = x_1 Iteratively compute α2\\alpha_2 : Fℳ(t,αt,yt,ℳ)=yt+1F_{\\mathcal M}(t, \\alpha_t, y_t, {\\mathcal M}) = y_{t+1} Fobs(yt+1)=xt+1F_{obs}(y_{t+1}) = x_{t+1}","code":""},{"path":"/articles/Fitting_pr2eir.html","id":"verification","dir":"Articles","previous_headings":"","what":"Verification","title":"Time Series PR to EIR","text":"function probably needs get pushed code somehow. set model: Note initial conditions wanted: initialize model PrPR find attack rate steady state: generate time series: use create PfPR time series: Now, pass PfPR time series dts_pr2ar_ts test returns AR time series:","code":"show_pr = function(model, get_pr=F_pr, i=1){   y = get_inits(model, flatten=TRUE)   get_pr(list_Xvars(y, model, 1), model$Xpar[[1]]) } SI <- xds_setup(Xname = \"SIS\", MYZname = \"SI\") show_pr(SI) SI <- dts_init_by_pr(.4, SI, F_pr, 365) show_pr(SI) ar <- dts_pr2ar_step(.4, si, F_pr) ar set.seed(230) ar_ts <- ar*c(1, rlnorm(14, 1, 1)) ar_ts si1 = si pr_ts = show_pr(si1) for(i in 2:length(ar_ts)){   y = update_by_ar(ar_ts[i], si1, 1)   si1 = update_inits(y, si1)   pr_ts = c(pr_ts, show_pr(si1)) } pr_ts ar_t <- dts_pr2ar_ts(pr_ts, si, F_pr) sum((ar_ts-ar_t)^2) < 1e-9"},{"path":"/articles/Scaling.html","id":"scaling","dir":"Articles","previous_headings":"","what":"Scaling","title":"Scaling for Malaria Metrics","text":"dog.","code":""},{"path":"/articles/Scaling.html","id":"xde_scaling","dir":"Articles","previous_headings":"Scaling","what":"xde_scaling","title":"Scaling for Malaria Metrics","text":"function xde_scaling() defines relationship EIR PR, outputs stable orbits value aEIR mesh 10−110^{-1} 10310^{3} code mob_library/Work need two versions? cohort trace functions ramp.xds take form F(, bday=0, scale=1).","code":"F_sin = function(t){(1.01 + sin(2*pi*t/365))} F_1 = function(t){0*t + 1/365} xds_setup_cohort(Xname = \"SIS\", F_season=F_1) -> sis xds_solve_cohort(sis) -> sis xde_scaling_eir(sis, 25) -> sis plot_eirpr(sis) require(viridis) ## Loading required package: viridis ## Loading required package: viridisLite clrs = turbo(25) plot_eirpr(sis)  with(sis$output$eirpr,{   points(aeir, pr, col = clrs)   lines(scaling[[5]]$aeir, scaling[[5]]$pr, col = clrs[5])   lines(scaling[[10]]$aeir, scaling[[10]]$pr, col = clrs[10])   lines(scaling[[15]]$aeir, scaling[[15]]$pr, col = clrs[15])   lines(scaling[[20]]$aeir, scaling[[20]]$pr, col = clrs[20]) })"},{"path":"/articles/Scaling.html","id":"xde_pr2eir","dir":"Articles","previous_headings":"Scaling","what":"xde_pr2eir()","title":"Scaling for Malaria Metrics","text":"Since xde_scaling defines relationship EIR PR, can now run xde_pr2eir() get predicted value eir, given value pr. code mob_library/Work can run 50 randomly chosen values PfPR. function flags values outside acceptable range. may seem important SIS model, range models can bounded, don’t want return nonsense values. can plot others:","code":"preir_i = xde_pr2eir(c(0.001, runif(25, 0, 1), 0.999), sis) preir_i$errors ##         pr1         pr2         pr3  ## 0.001000000 0.007399441 0.999000000 plot_eirpr(sis) with(sis$outputs$eirpr, points(aeir, pr, pch = 15)) with(preir_i, points(365*eir, pr, pch = 19, col = \"red\"))"},{"path":[]},{"path":"/articles/Scaling.html","id":"seasonality","dir":"Articles","previous_headings":"Scaling > Scaling","what":"Seasonality","title":"Scaling for Malaria Metrics","text":"","code":"sis0 <- xds_setup_cohort(Xname = \"SIS\", F_season = F_sin) xde_scaling_eir(sis0, 25) -> sis0 clrs = turbo(25) with(sis$outputs$eirpr, plot(aeir, pr, type = \"l\", log = \"x\", xaxt= \"n\", xlab = \"aEIR\", ylab = \"PR\")) axis(1, 10^(-1:3), c(0.1, 1, 10, 100, 1000)) lines(sis$outputs$eirpr$aeir, sis0$outputs$eirpr$pr, col = \"tomato\", lwd=2)   with(sis0$outputs$eirpr, points(aeir, pr, col = clrs)) with(sis0$outputs$eirpr, lines(scaling[[5]]$aeir, scaling[[5]]$pr, col = clrs[5])) with(sis0$outputs$eirpr, lines(scaling[[10]]$aeir, scaling[[10]]$pr, col = clrs[10])) with(sis0$outputs$eirpr, lines(scaling[[15]]$aeir, scaling[[15]]$pr, col = clrs[15])) with(sis0$outputs$eirpr, lines(scaling[[20]]$aeir, scaling[[20]]$pr, col = clrs[20]))"},{"path":"/articles/Scaling.html","id":"drug-taking","dir":"Articles","previous_headings":"Scaling > Scaling","what":"Drug taking","title":"Scaling for Malaria Metrics","text":"","code":"sip = xds_setup_cohort(Xname = \"SIP\", F_season=F_sin) sip$Xpar[[1]]$eta = 1/40 xde_scaling_eir(sip, 25) -> sip sip1 = setup_exposure_nb(sip, 1/50) xde_scaling_eir(sip1, 25) -> sip1 with(sis$outputs$eirpr, plot(aeir, pr, type = \"l\", log = \"x\", xaxt= \"n\", xlab = \"aEIR\", ylab = \"PR\")) axis(1, 10^(-1:3), c(0.1, 1, 10, 100, 1000)) with(sip$outputs$eirpr, lines(aeir, pr, col = \"darkorange\")) with(sip1$outputs$eirpr, lines(aeir, pr, col = \"brown\"))"},{"path":"/articles/Scaling.html","id":"environmental-heterogeneity","dir":"Articles","previous_headings":"Scaling > Scaling","what":"Environmental Heterogeneity","title":"Scaling for Malaria Metrics","text":"","code":"sis4 <- setup_exposure_nb(sis, 1/50) xde_scaling_eir(sis4, 25) -> sis4 with(sis$outputs$eirpr, plot(aeir, pr, type = \"l\", log = \"x\", xaxt= \"n\", xlab = \"aEIR\", ylab = \"PR\")) axis(1, 10^(-1:3), c(0.1, 1, 10, 100, 1000)) #with(sis2$outputs$eir, lines(aeir, pr, col = \"blue\")) #with(sis3$outputs$eir, lines(aeir, pr, col = \"purple\")) with(sis4$outputs$eir, lines(aeir, pr, col = \"darkblue\"))"},{"path":"/articles/Scaling.html","id":"travel","dir":"Articles","previous_headings":"Scaling > Scaling","what":"Travel","title":"Scaling for Malaria Metrics","text":"","code":"sis5 <- setup_travel_static(sis, delta = 1/5/365) xde_scaling_eir(sis5, 25) -> sis5 with(sis$outputs$eirpr, plot(aeir, pr, type = \"l\", log = \"x\", xaxt= \"n\", xlab = \"aEIR\", ylab = \"PR\")) axis(1, 10^(-1:3), c(0.1, 1, 10, 100, 1000)) with(sis5$outputs$eir, lines(aeir, pr, col = \"darkgreen\"))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David L. Smith. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2024). ramp.work: Algorithms support workflows analytics pipelines RAMP (Robust Analytics Malaria Policy). R package version 0.1.0.","code":"@Manual{,   title = {ramp.work: Algorithms to support workflows and analytics pipelines for RAMP (Robust Analytics for Malaria Policy)},   author = {David L. Smith},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Algorithms to support workflows and analytics pipelines for RAMP (Robust Analytics for Malaria Policy)","text":"ramp.work algorithm code library extends ramp.xds. install latest version ramp.xds GitHub, run following lines code R session. install latest version ramp.work Github, run following line R session:","code":"library(devtools) devtools::install_github(\"dd-harp/ramp.xds\") devtools::install_github(\"dd-harp/ramp.work\")"},{"path":"/index.html","id":"what-is-ramp","dir":"","previous_headings":"","what":"What is RAMP?","title":"Algorithms to support workflows and analytics pipelines for RAMP (Robust Analytics for Malaria Policy)","text":"RAMP – Robust Analytics Malaria Policy – bespoke inferential system malaria decision support adaptive malaria control. core goal RAMP characterize, quantify, propagate uncertainty conventional analysis simulation-based analytics.","code":""},{"path":"/index.html","id":"what-is-rampxds","dir":"","previous_headings":"","what":"What is ramp.xds?","title":"Algorithms to support workflows and analytics pipelines for RAMP (Robust Analytics for Malaria Policy)","text":"ramp.xds R software package supports nimble model building simulation-based analytics malaria research. designed help research scientists policy analysts set , analyze, solve, apply dynamical systems models describing epidemiology, spatial transmission dynamics, control malaria mosquito-transmitted pathogens. software also supports nimble model building analysis mosquito ecology, capability handle forcing weather exogenous variables. software designed around rigorous mathematical framework modular model building, described Spatial Dynamics Malaria Transmission (Wu SL, et al. 2023. PLoS Computational Biology)1. mathematical framework now extended cover exogenous forcing weather vector control.","code":""},{"path":"/index.html","id":"what-is-rampwork","dir":"","previous_headings":"","what":"What is ramp.work?","title":"Algorithms to support workflows and analytics pipelines for RAMP (Robust Analytics for Malaria Policy)","text":"ramp.work code library algorithms various work tasks ramp.xds. part suite R packages developed support RAMP: ramp.xds. core computational engine simulation-based analytics. includes basic set models – enough design, verify, demonstrate basic features modular software. ramp.library extended library stable code tested verified. includes large set model families published peer review included ramp.xds ability reuse code reduces costs replicating studies. library, ramp.xds also supports nimble model building analytics mosquito-borne pathogens. ramp.work includes algorithms apply framework, include code fit models data constrained optimization ramp.malaria includes large set models illustrating capabilities ramp.xds ramp.work active development.","code":""},{"path":"/reference/F_sse.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of squared errors. Works as F_gof in xde_maximize_gof — F_sse","title":"Sum of squared errors. Works as F_gof in xde_maximize_gof — F_sse","text":"Compute sum squared errors","code":""},{"path":"/reference/F_sse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of squared errors. Works as F_gof in xde_maximize_gof — F_sse","text":"","code":"F_sse(obs, pred)"},{"path":"/reference/F_sse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum of squared errors. Works as F_gof in xde_maximize_gof — F_sse","text":"obs set observations pred set predicted values observations","code":""},{"path":"/reference/F_sse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum of squared errors. Works as F_gof in xde_maximize_gof — F_sse","text":"sum squared errors","code":""},{"path":"/reference/ar_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the attack rate to get — ar_compare","title":"Compute the attack rate to get — ar_compare","text":"Compute sum squared errors","code":""},{"path":"/reference/ar_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the attack rate to get — ar_compare","text":"","code":"ar_compare(ar, pr, get_pr, model, n = 1)"},{"path":"/reference/ar_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the attack rate to get — ar_compare","text":"ar attack rate pr next value PfPR get_pr function compute PR, F_pr model model n number times iterate","code":""},{"path":"/reference/ar_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the attack rate to get — ar_compare","text":"sum squared errors","code":""},{"path":"/reference/dts_compute_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"sum of squared errors — dts_compute_gof","title":"sum of squared errors — dts_compute_gof","text":"Compute sum squared errors","code":""},{"path":"/reference/dts_compute_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum of squared errors — dts_compute_gof","text":"","code":"dts_compute_gof(ppp, data, model, F_obs, put_par, F_gof, Tmax = 365)"},{"path":"/reference/dts_compute_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum of squared errors — dts_compute_gof","text":"ppp parameters fitted data set observations model model F_obs function return predicted observations model put_par function put parameters fitted F_gof function compute goodness fit Tmax maximum runtime","code":""},{"path":"/reference/dts_compute_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sum of squared errors — dts_compute_gof","text":"sum squared errors","code":""},{"path":"/reference/dts_init_by_pr.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a dts model such that — dts_init_by_pr","title":"Initialize a dts model such that — dts_init_by_pr","text":"Compute sum squared errors","code":""},{"path":"/reference/dts_init_by_pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a dts model such that — dts_init_by_pr","text":"","code":"dts_init_by_pr(pr, model, get_pr, n = 365, tol = 1e-08)"},{"path":"/reference/dts_init_by_pr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a dts model such that — dts_init_by_pr","text":"pr PR time series model model get_pr functrion compute PR, F_pr n number times iterate tol tolerance","code":""},{"path":"/reference/dts_init_by_pr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a dts model such that — dts_init_by_pr","text":"model, initialized","code":""},{"path":"/reference/dts_maximize_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"sum of squared errors — dts_maximize_gof","title":"sum of squared errors — dts_maximize_gof","text":"Compute sum squared errors","code":""},{"path":"/reference/dts_maximize_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum of squared errors — dts_maximize_gof","text":"","code":"dts_maximize_gof(   data,   model,   F_obs,   get_par,   put_par,   F_gof,   Tmax = 365,   dt = 1,   tol = 1e-08 )"},{"path":"/reference/dts_maximize_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum of squared errors — dts_maximize_gof","text":"data set observations model model F_obs function return predicted observations model get_par function get parameters fitted put_par function put parameters fitted F_gof function compute goodness fit Tmax maximum runtime dt time step tol desired accuracy","code":""},{"path":"/reference/dts_maximize_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sum of squared errors — dts_maximize_gof","text":"sum squared errors","code":""},{"path":"/reference/dts_pr2ar_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the attack rates for a set of strata for a step-ahead algorithm — dts_pr2ar_step","title":"Compute the attack rates for a set of strata for a step-ahead algorithm — dts_pr2ar_step","text":"Compute sum squared errors","code":""},{"path":"/reference/dts_pr2ar_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the attack rates for a set of strata for a step-ahead algorithm — dts_pr2ar_step","text":"","code":"dts_pr2ar_step(pr, model, get_pr, n = 365, tol = 1e-08)"},{"path":"/reference/dts_pr2ar_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the attack rates for a set of strata for a step-ahead algorithm — dts_pr2ar_step","text":"pr next value PfPR model model get_pr function compute PR, F_pr n number times iterate tol tolerance","code":""},{"path":"/reference/dts_pr2ar_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the attack rates for a set of strata for a step-ahead algorithm — dts_pr2ar_step","text":"sum squared errors","code":""},{"path":"/reference/dts_pr2ar_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the attack rate to get — dts_pr2ar_ts","title":"Compute the attack rate to get — dts_pr2ar_ts","text":"Compute sum squared errors","code":""},{"path":"/reference/dts_pr2ar_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the attack rate to get — dts_pr2ar_ts","text":"","code":"dts_pr2ar_ts(pr, model, get_pr, tol = 1e-08)"},{"path":"/reference/dts_pr2ar_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the attack rate to get — dts_pr2ar_ts","text":"pr PR time series model model get_pr function compute PR, F_pr tol tolerance","code":""},{"path":"/reference/dts_pr2ar_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the attack rate to get — dts_pr2ar_ts","text":"vector attack rates, time series","code":""},{"path":"/reference/lines_eirVpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add lines for the EIR(t) *vs.* the PR(t) — lines_eirVpr","title":"Add lines for the EIR(t) *vs.* the PR(t) — lines_eirVpr","text":"Add lines EIR(t) *vs.* PR(t)","code":""},{"path":"/reference/lines_eirVpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add lines for the EIR(t) *vs.* the PR(t) — lines_eirVpr","text":"","code":"lines_eirVpr(eir, pr, nStrata, clrs = \"black\", llty = 1)"},{"path":"/reference/lines_eirVpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add lines for the EIR(t) *vs.* the PR(t) — lines_eirVpr","text":"eir daily EIR pr parasite rate nStrata number population strata clrs [character] vector colors llty [integer] (integers) specifies `lty` plotting","code":""},{"path":"/reference/lines_eirpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add lines for an eir-pr scaling relationship — lines_eirpr","title":"Add lines for an eir-pr scaling relationship — lines_eirpr","text":"Add lines eir-pr scaling relationship","code":""},{"path":"/reference/lines_eirpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add lines for an eir-pr scaling relationship — lines_eirpr","text":"","code":"lines_eirpr(pars, clrs = \"black\", llty = 1)"},{"path":"/reference/lines_eirpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add lines for an eir-pr scaling relationship — lines_eirpr","text":"pars [list] *e.g.*,  generated `ramp.xds::xde_setup()` defines model `ramp.xds` clrs [character] vector colors llty [list]","code":""},{"path":"/reference/mean_phase_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the phase of the peak — mean_phase_peak","title":"Compute the phase of the peak — mean_phase_peak","text":"time series \\(X,\\) compute phase, time year peak","code":""},{"path":"/reference/mean_phase_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the phase of the peak — mean_phase_peak","text":"","code":"mean_phase_peak(t, X, window = 180)"},{"path":"/reference/mean_phase_peak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the phase of the peak — mean_phase_peak","text":"t times X data window days around t","code":""},{"path":"/reference/plot_eirVpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot EIR(t) *vs.* the PR(t) — plot_eirVpr","title":"Plot EIR(t) *vs.* the PR(t) — plot_eirVpr","text":"Plot EIR(t) *vs.* PR(t)","code":""},{"path":"/reference/plot_eirVpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot EIR(t) *vs.* the PR(t) — plot_eirVpr","text":"","code":"plot_eirVpr(   pars,   i = 1,   clrs = \"black\",   llty = 1,   stable = FALSE,   add_axes = TRUE )"},{"path":"/reference/plot_eirVpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot EIR(t) *vs.* the PR(t) — plot_eirVpr","text":"pars [list] defines `ramp.xds` model (*e.g.*,  generated `ramp.xds::xde_setup()`) host species index clrs [character] vector colors llty [integer] specifies `lty` plotting stable [logical] set FALSE `orbits` TRUE `stable_orbits` add_axes [logical] plot add_axes FALSE","code":""},{"path":"/reference/plot_eirpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the eir-pr scaling relationship — plot_eirpr","title":"Plot the eir-pr scaling relationship — plot_eirpr","text":"Plot eir-pr scaling relationship","code":""},{"path":"/reference/plot_eirpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the eir-pr scaling relationship — plot_eirpr","text":"","code":"plot_eirpr(pars, clrs = \"black\", llty = 1)"},{"path":"/reference/plot_eirpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the eir-pr scaling relationship — plot_eirpr","text":"pars [list] *e.g.*,  generated `ramp.xds::xde_setup()` defines model `ramp.xds` clrs [character] vector colors llty [list]","code":""},{"path":"/reference/pr2Lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Using the eirpr matrix and a RM model, convert pr to Lambda — pr2Lambda","title":"Using the eirpr matrix and a RM model, convert pr to Lambda — pr2Lambda","text":"takes model uses XH component define eirpr relationship using `xde_scaling_eir` calls `xde_scaling_lambda`","code":""},{"path":"/reference/pr2Lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using the eirpr matrix and a RM model, convert pr to Lambda — pr2Lambda","text":"","code":"pr2Lambda(pr, model, constrain = TRUE)"},{"path":"/reference/pr2Lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using the eirpr matrix and a RM model, convert pr to Lambda — pr2Lambda","text":"pr vector model list defines `ramp.xds` model (*e.g.*,  generated `xde_setup()`) constrain logical, TRUE set negative values zero","code":""},{"path":"/reference/split_stratum_by_biting.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a stratum into two strata, assigning — split_stratum_by_biting","title":"Split a stratum into two strata, assigning — split_stratum_by_biting","text":"Split stratum two strata, assigning","code":""},{"path":"/reference/split_stratum_by_biting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a stratum into two strata, assigning — split_stratum_by_biting","text":"","code":"split_stratum_by_biting(pars, i, j, p, fac)"},{"path":"/reference/split_stratum_by_biting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a stratum into two strata, assigning — split_stratum_by_biting","text":"pars [list] defining model host species index j stratum split p fraction higher exposure stratum fac factor increase","code":""},{"path":"/reference/split_stratum_by_biting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a stratum into two strata, assigning — split_stratum_by_biting","text":"pars list","code":""},{"path":"/reference/ssMYZ.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the MYZss object for `xde_scaling_lambda` — ssMYZ","title":"Set up the MYZss object for `xde_scaling_lambda` — ssMYZ","text":"function computes several quantities require","code":""},{"path":"/reference/ssMYZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the MYZss object for `xde_scaling_lambda` — ssMYZ","text":"","code":"ssMYZ(model)"},{"path":"/reference/ssMYZ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up the MYZss object for `xde_scaling_lambda` — ssMYZ","text":"model list defines `ramp.xds` model (*e.g.*,  generated `xds_setup()`)","code":""},{"path":"/reference/update_by_ar.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the next y — update_by_ar","title":"Compute the next y — update_by_ar","text":"Compute sum squared errors","code":""},{"path":"/reference/update_by_ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the next y — update_by_ar","text":"","code":"update_by_ar(ar, model, n = 365)"},{"path":"/reference/update_by_ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the next y — update_by_ar","text":"ar attack rate model model n number times iterate","code":""},{"path":"/reference/update_by_ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the next y — update_by_ar","text":"vector state variables, y","code":""},{"path":"/reference/xde_compute_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"sum of squared errors — xde_compute_gof","title":"sum of squared errors — xde_compute_gof","text":"Compute sum squared errors","code":""},{"path":"/reference/xde_compute_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum of squared errors — xde_compute_gof","text":"","code":"xde_compute_gof(ppp, data, model, F_obs, put_par, F_gof, Tmax = 3650)"},{"path":"/reference/xde_compute_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum of squared errors — xde_compute_gof","text":"ppp parameters fitted data set observations model model F_obs function return predicted observations model put_par function put parameters fitted F_gof function compute goodness fit Tmax maximum runtime","code":""},{"path":"/reference/xde_compute_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sum of squared errors — xde_compute_gof","text":"sum squared errors","code":""},{"path":"/reference/xde_eir2ni.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert eir to ni — xde_eir2ni","title":"Convert eir to ni — xde_eir2ni","text":"Use outputs$eirpr table interpolate","code":""},{"path":"/reference/xde_eir2ni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert eir to ni — xde_eir2ni","text":"","code":"xde_eir2ni(eir, model, extend = FALSE)"},{"path":"/reference/xde_eir2ni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert eir to ni — xde_eir2ni","text":"eir [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_eir2pr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert eir to pr — xde_eir2pr","title":"Convert eir to pr — xde_eir2pr","text":"Use outputs$eirpr table interpolate","code":""},{"path":"/reference/xde_eir2pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert eir to pr — xde_eir2pr","text":"","code":"xde_eir2pr(eir, model, extend = FALSE)"},{"path":"/reference/xde_eir2pr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert eir to pr — xde_eir2pr","text":"eir [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_maximize_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"sum of squared errors — xde_maximize_gof","title":"sum of squared errors — xde_maximize_gof","text":"Compute sum squared errors","code":""},{"path":"/reference/xde_maximize_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sum of squared errors — xde_maximize_gof","text":"","code":"xde_maximize_gof(   data,   model,   F_obs,   get_par,   put_par,   F_gof,   Tmax = 3650,   tol = 1e-08 )"},{"path":"/reference/xde_maximize_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sum of squared errors — xde_maximize_gof","text":"data set observations model model F_obs function return predicted observations model get_par function get parameters fitted put_par function put parameters fitted F_gof function compute goodness fit Tmax maximum runtime tol desired accuracy","code":""},{"path":"/reference/xde_maximize_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sum of squared errors — xde_maximize_gof","text":"sum squared errors","code":""},{"path":"/reference/xde_pr2eir.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pr to eir — xde_pr2eir","title":"Convert pr to eir — xde_pr2eir","text":"Use outputs$eirpr table convert set pr values eir values","code":""},{"path":"/reference/xde_pr2eir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pr to eir — xde_pr2eir","text":"","code":"xde_pr2eir(pr, model, extend = FALSE)"},{"path":"/reference/xde_pr2eir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pr to eir — xde_pr2eir","text":"pr [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_pr2lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pr to lambda — xde_pr2lambda","title":"Convert pr to lambda — xde_pr2lambda","text":"Use outputs$lambdapr table convert set pr values lambda values","code":""},{"path":"/reference/xde_pr2lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pr to lambda — xde_pr2lambda","text":"","code":"xde_pr2lambda(pr, model, extend = FALSE)"},{"path":"/reference/xde_pr2lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pr to lambda — xde_pr2lambda","text":"pr [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_pr2m.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pr to mosquito density — xde_pr2m","title":"Convert pr to mosquito density — xde_pr2m","text":"Use outputs$eirpr table convert set pr values scaled mosquito density values","code":""},{"path":"/reference/xde_pr2m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pr to mosquito density — xde_pr2m","text":"","code":"xde_pr2m(pr, model, extend = FALSE)"},{"path":"/reference/xde_pr2m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pr to mosquito density — xde_pr2m","text":"pr [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_pr2ni.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pr to ni — xde_pr2ni","title":"Convert pr to ni — xde_pr2ni","text":"Use outputs$eirpr table interpolate","code":""},{"path":"/reference/xde_pr2ni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pr to ni — xde_pr2ni","text":"","code":"xde_pr2ni(pr, model, extend = FALSE)"},{"path":"/reference/xde_pr2ni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pr to ni — xde_pr2ni","text":"pr [vector] model [list] extend [logical] option determine whether extend outside range","code":""},{"path":"/reference/xde_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an eirpr object for an arbitary model — xde_scaling","title":"Construct an eirpr object for an arbitary model — xde_scaling","text":"takes model uses XH component define eirpr relationship using `xde_scaling_eir` calls `xde_scaling_lambda`","code":""},{"path":"/reference/xde_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an eirpr object for an arbitary model — xde_scaling","text":"","code":"xde_scaling(model, N = 25, F_eir = NULL)"},{"path":"/reference/xde_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an eirpr object for an arbitary model — xde_scaling","text":"model list defines `ramp.xds` model (*e.g.*,  generated `xde_setup()`) N size mesh aEIR F_eir function compute EIR function time","code":""},{"path":"/reference/xde_scaling_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute eir-pr scaling relationships — xde_scaling_Z","title":"Compute eir-pr scaling relationships — xde_scaling_Z","text":"function computes average annual values eir, pr, interesting terms returns table. computed model class \"human\"","code":""},{"path":"/reference/xde_scaling_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute eir-pr scaling relationships — xde_scaling_Z","text":"","code":"xde_scaling_Z(model, N = 25)"},{"path":"/reference/xde_scaling_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute eir-pr scaling relationships — xde_scaling_Z","text":"model list defines `ramp.xds` model generated `xde_setup_human()` N integer, size mesh aEIR","code":""},{"path":"/reference/xde_scaling_eir.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute eir-pr scaling relationships — xde_scaling_eir","title":"Compute eir-pr scaling relationships — xde_scaling_eir","text":"function calls [xde_solve_cohort] computes average annual values eir, pr, interesting terms returns table. computed model class \"cohort\"","code":""},{"path":"/reference/xde_scaling_eir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute eir-pr scaling relationships — xde_scaling_eir","text":"","code":"xde_scaling_eir(model, N = 25)"},{"path":"/reference/xde_scaling_eir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute eir-pr scaling relationships — xde_scaling_eir","text":"model list defines `ramp.xds` model generated `xde_setup_cohort()` N integer","code":""},{"path":"/reference/xde_scaling_eir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute eir-pr scaling relationships — xde_scaling_eir","text":"**`xds`** model object","code":""},{"path":"/reference/xde_scaling_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute lambda from an eirpr object using the Ross-Macdonald model — xde_scaling_lambda","title":"Compute lambda from an eirpr object using the Ross-Macdonald model — xde_scaling_lambda","text":"function computes `m` `lambda` output one `xde_scaling_eir` `xde_scaling_Z`.  outputs attached eirpr","code":""},{"path":"/reference/xde_scaling_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute lambda from an eirpr object using the Ross-Macdonald model — xde_scaling_lambda","text":"","code":"xde_scaling_lambda(model)"},{"path":"/reference/xde_scaling_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute lambda from an eirpr object using the Ross-Macdonald model — xde_scaling_lambda","text":"model list defines `ramp.xds` model (*e.g.*,  generated `xds_setup()`)","code":""}]
